---
title: "CSS_coursework"
format: html
editor: visual
bibliography: references.bib
---

---
execute:
  order: sequential
---

```{r}
#| include: false


pacman::p_load(
  tidyverse, # tidyverse pkgs including purrr
  glue, #combining strings and objects
  gapminder, # dataset
  ggplot2, #plotting
  gridExtra, #arranging plots
  skimr
) 

library(readr)
ds <- read_csv("Vaccine Coverage and Disease Burden - WHO (2017).csv")
```

**Data Exploration and Contextualization**

The dataset under analysis, ‘Vaccine Coverage and Disease Burden Statistics’, provided by the WHO, provides detailed statistics associated with a variety of diseases. The variables cover immunization rates amongst one-year-olds, disease incidence, as well as death rates across the globe’s countries and regions, recorded as values per year. For certain variables and countries, coined ‘Entity’s in the dataset, the data reaches as early as 1974, and stretches until 2015. No data crosses this range. Thus, the dataset offers valuable insight into public health, proving helpful for social scientists.

Such a dataset can act as a key resource in research on public health’s interlink with other social factors, such as socioeconomics, psychology, culture, etc. [\@cohen2006](Cohen%20et%20al.,%202006)*.* Advantageously, the dataset provides data on both immunization and incidence of certain diseases which severely impacted society, such as polio and measles. Thus, we are able to examine the correlation between immunization and incidence. Social scientists can further use this to their advantage, by examining changes in such variables and their relation with other social factors. Such research can be fed back into medicinal development, and public health related policies.

The means, standard deviations, and missing values were calculated using their respective functions. They were calculated for each Entity in each variable. However, due to the nature of the data being over a period of time, the insight provided by these statistics is limited. An Entity's mean for one variable which stretches over a period of years oversimplifies the data, and does not demonstrate the changes in the variable, and thus lacks meaning. Similarly, the standard deviation, measuring dispersion from the mean, does not reveal any patterns occurring over time, thus lacking value in the given research focus.

The number of missing values varied between variables and entities, thus throughout the coding process missing values were always removed, in order not to skew the data.

```{r}
#| echo: false

ds %>%
  group_by(Entity) %>%
  summarise(
    mean(`BCG immunization coverage among 1-year-olds (WHO 2017)`, na.rm=TRUE),
    sd(`BCG immunization coverage among 1-year-olds (WHO 2017)`, na.rm=TRUE),
    sum(is.na(`BCG immunization coverage among 1-year-olds (WHO 2017)`)),
    mean(`Hepatitis B (HepB3) immunization coverage among 1-year-olds (WHO 2017)`, na.rm=TRUE),
    sd(`Hepatitis B (HepB3) immunization coverage among 1-year-olds (WHO 2017)`, na.rm=TRUE),
    sum(is.na(`Hepatitis B (HepB3) immunization coverage among 1-year-olds (WHO 2017)`)),
    mean(`DTP3 immunization coverage among 1-year-olds (WHO 2017)`, na.rm=TRUE),
    sd(`DTP3 immunization coverage among 1-year-olds (WHO 2017)`, na.rm=TRUE),
    sum(is.na(`DTP3 immunization coverage among 1-year-olds (WHO 2017)`)),
    mean(`Polio (Pol3) immunization coverage among 1-year-olds (WHO 2017)`, na.rm=TRUE),
    sd(`Polio (Pol3) immunization coverage among 1-year-olds (WHO 2017)`, na.rm=TRUE),
    sum(is.na(`Polio (Pol3) immunization coverage among 1-year-olds (WHO 2017)`)),
    mean(`Measles (MCV) immunization coverage among 1-year-olds (WHO 2017)`, na.rm=TRUE),
    sd(`Measles (MCV) immunization coverage among 1-year-olds (WHO 2017)`, na.rm=TRUE),
    sum(is.na(`Measles (MCV) immunization coverage among 1-year-olds (WHO 2017)`)),
    mean(`Number of confirmed tetanus cases (WHO 2017)`, na.rm=TRUE),
    sd(`Number of confirmed tetanus cases (WHO 2017)`, na.rm=TRUE),
    sum(is.na(`Number of confirmed tetanus cases (WHO 2017)`)),
    mean(`Number confirmed polio cases (WHO 2017)`, na.rm=TRUE),
    sd(`Number confirmed polio cases (WHO 2017)`, na.rm=TRUE),
    sum(is.na(`Number confirmed polio cases (WHO 2017)`)),
    mean(`Number of confirmed pertussis cases (WHO 2017)`, na.rm=TRUE),
    sd(`Number of confirmed pertussis cases (WHO 2017)`, na.rm=TRUE),
    sum(is.na(`Number of confirmed pertussis cases (WHO 2017)`)),
    mean(`Number of confirmed measles cases (WHO 2017)`, na.rm=TRUE),
    sd(`Number of confirmed measles cases (WHO 2017)`, na.rm=TRUE),
    sum(is.na(`Number of confirmed measles cases (WHO 2017)`)),
    mean(`Number of confirmed diphtheria cases (WHO 2017)`, na.rm=TRUE),
    sd(`Number of confirmed diphtheria cases (WHO 2017)`, na.rm=TRUE),
    sum(is.na(`Number of confirmed diphtheria cases (WHO 2017)`)),
    mean(`Estimated deaths due to tuberculosis per 100,000 population, excluding HIV (WHO 2017)`, na.rm=TRUE),
    sd(`Estimated deaths due to tuberculosis per 100,000 population, excluding HIV (WHO 2017)`, na.rm=TRUE),
    sum(is.na(`Estimated deaths due to tuberculosis per 100,000 population, excluding HIV (WHO 2017)`)),
    mean(`Estimated number of deaths due to tuberculosis, excluding HIV (WHO 2017)`, na.rm=TRUE),
    sd(`Estimated number of deaths due to tuberculosis, excluding HIV (WHO 2017)`, na.rm=TRUE),
    sum(is.na(`Estimated number of deaths due to tuberculosis, excluding HIV (WHO 2017)`))
  )


```

**Data Processing and Functional Programming**

To avoid any human error in the programming process due to the length of the dataset's name, it was renamed to 'ds', and will be referred to as such from now onward.

As can be seen in the dataset, only two diseases have information on both immunization rates and disease incidence: polio and measles. Thus, these two diseases were selected to observe the correlation between the two variables. As shown below, to tidy the dataset for it to consist of only information needed for the final visualizations, we selected the six variables needed, and renamed those with longer names for simplicity for the remaining coding process.

```{r}

ds <- ds %>%
  select(Entity, Year, `Polio (Pol3) immunization coverage among 1-year-olds (WHO 2017)`, `Measles (MCV) immunization coverage among 1-year-olds (WHO 2017)`, `Number confirmed polio cases (WHO 2017)`, `Number of confirmed measles cases (WHO 2017)`) %>%
  rename(
    polio_imm = `Polio (Pol3) immunization coverage among 1-year-olds (WHO 2017)`,
    measles_imm = `Measles (MCV) immunization coverage among 1-year-olds (WHO 2017)`,
    polio_cases = `Number confirmed polio cases (WHO 2017)`,
    measles_cases = `Number of confirmed measles cases (WHO 2017)`
    )

str(ds)
```

Due to the extensive number of countries that data is provided for within the dataset, the analysis must be narrowed down. Therefore, it was opted to select the country with the greatest range in case numbers across the years data is provided for. In a country with a large increase in case numbers, an effective immunization system is vital, thus comparing the two with each other, and a cumulative cases visualization helps evaluate whether the variables may correspond, and determine the efficacy of the immunization schedule. Additionally, focusing on a country with a large range allows for a clearer view of visual trends, further easing the comparison.

To achieve this, first, a function to calculate range of cases per Entity had to be written. The pre-existing range function in r returns a vector containing maximum and minimum values, however the aim is to find the difference between the maximum and minimum values, thus a new function had to be written.

Below, is the initial function written. While the general structure works, there is an error in code of the function's argument. By merely making the argument 'variable', the input is detected as an object rather than a variable within ds.

```{r}
entity_range <- function(variable){ #defines a function with an attempt to use variable names as the argument.
  ds %>% #begins data pipeline.
  group_by(Entity) %>% #groups the data by country.
  summarize(range = max(variable, na.rm = TRUE) - min(variable, na.rm = TRUE)) #calculating the range.
}

#calling the function for polio cases
polio_cases_range <- entity_range(ds$polio_cases)
print(polio_cases_range)
```

Thus, another attempt is made. This function attempts to use indices as the argument, to instruct the function to access columns via their index position. However, this only returns the maximum values for each entity without providing their range in case numbers.

```{r}
entity_range <- function(i) { #defines a function which access columns via their index position in the dataset
  ds %>%
    group_by(Entity) %>%
    summarize(range = max(ds[[i]], na.rm = TRUE) - min(ds[[i]], na.rm = TRUE))
}

#followed by the below for calling the function

#function applied to polio cases
polio_cases_range <- entity_range(5) #index position of the polio_cases column is 5
print(polio_cases_range)

#function applied to measles cases 
measles_cases_range <- entity_range(6) #index position of the polio_cases column is 6
print(measles_cases_range)
```

Finally, ChatGPT is consulted in attempt to identify the issue, which proposed several alternative solutions. However, many of them utilized coding far above the module's content level, and beyond understanding, leaving only fractions of the original code. A solution not too different from the original code was desired. Deciding to return to a code utilizing variable's names rather than indices due to this being less prone to human error and confusion, the below code was suggested.

```{r}

entity_range <- function(variable) { #defines a function 'entity_range' which takes variable names as the input.
  ds %>% #begins data pipelin.e
    group_by(Entity) %>% #groups the data by country.
    summarize(range = max(.data[[variable]], na.rm = TRUE) - min(.data[[variable]], na.rm = TRUE)) 
  #'summarize' creates a new summary for each entity.
  #'range = ' creates a column within the summary displaying the calculated range of the inputed variable by subtracting the minimum value from the maximum value of the variable.
  #'.data[[variable]]' provided by ChatGPT, allows functions to access variables within the dataset dynamically.
  #'na.rm = TRUE' removes missing values (NA) when calculation is performed.
}
```

The functions accessing variables within the dataset dynamically means it accesses the column under whichever variable name is input as the argument. If it were not dynamic, the function would be locked to one variable. Additionally, this differs from the original code written as it accesses the input as a variable rather than an object.

Once this function was written, it was applied to the necessary columns, as shown below. The argument must be written as a string to be recognized as a column name rather than an object.

```{r}
#function applied to polio cases variable
polio_cases_range <- entity_range("polio_cases")
print(polio_cases_range)

#function applied to measles cases variable
measles_cases_range <- entity_range("measles_cases")
print(measles_cases_range)
```

Next, we must select the Entity with the greatest range.

```{r}
#selecting entity with greatest range in polio cases
max_range_entity_polio <- polio_cases_range%>% #assigns result of the code to a new variable "max_range_entity_polio".
  arrange(desc(range)) %>% #arranges the entities in descending order.
  slice(1) #selects the first row of the column

print(max_range_entity_polio) #returns the entity in the first row of the column, which is the one with the greatest range due to them being arranged in descending order.

#selecting entity with greatest range in measles cases
#the same code is applied as above, with one minor difference.
max_range_entity_measles <- measles_cases_range %>%
  filter(Entity != "World") %>% #instructs to filter out the row belonging to the Entity 'World'. 
  arrange(desc(range)) %>%
  slice(1)

print(max_range_entity_measles)
```

The Entity "World' is filtered out as it originally was returned as the entity with the greatest range, however we want to focus on countries exclusively. The entities returned, Tajikistan and China, differ hugely in range. Upon observation, Tajikistan only has data for one year of polio cases, thus that value is automatically the range, which happens to be greater than the range of other countries. This lack of data can be attributed to the near eradication of polio worldwide that occurred in the late 20th century [@nathanson2010]. Thus, due to the number of missing values, data visualizations for this variable would provide a lot less insight into the relationship between immunization and case numbers. Thus, we decided to focus on measles in China specifically. We tidied ds further, to remove unnecessary variables.

```{r}
ds <- ds %>%
  select(Entity, Year, measles_cases, measles_imm) %>%
  filter(Entity == "China")
view(ds)

```

As can be seen, China only has data from 1983 onward, so we filter those years.

```{r}
ds <- ds %>%
  filter(Year>1982)
view(ds)
```

For the final piece of wrangling necessary for the data visualization, an additional column is added to the dataset, displaying cumulative cases every year SOURCE FOR FINDING CUMULATIVE FUNCTION

```{r}
ds <- ds %>%
  mutate(cumulative_measles_cases = cumsum(measles_cases)) #calculates cumulation of cases per year
view(ds)
```

The visualizations to be made are all scatter plots, with the same X-axis of 'Year', and varying Y-axes. Thus, a function was created automating plotting. Repeating the same process three times would be more time consuming and more prone to error, thus creating a function increases efficiency.

```{r}
create_scatter_plot <- function(i) { #defines a function automating plotting a scatter plot, taking 'i' as an argument, which represents column index. 
  ds %>%
    ggplot(aes_string(x = names(ds)[2], y = names(ds)[i])) + #'aes_string' labels the x and y axes.
    #'names(ds)[2]' attributes the x-axis to the column in ds of the second index, which is 'Year'.
    #'names(ds)[i]' attributes the y-axis to column 'i', enabling any variable within ds to be used when the function is called.
    geom_point() + #plots each piece of data as a point on the graph, creating a scatter plot.
    labs( #adds labels to graph
      title = glue("{names(ds)[i]} in China per year"), #'glue' combines objects with strings. Here, the object is 'names(ds)[i]' which allows the name of the column at the given index to be used in the title. 
      y = glue("{names(ds)[i]}") #'glue' dynamically sets the y-axis label as the name of the column at the given index.
    ) +
    geom_smooth() #adds a smooth line of best fit, touching all points of the graph.
}

plots_list <- map(3:ncol(ds), create_scatter_plot) #creates scatter plots iterating from the third column of ds to the last one.
plots_grid <- gridExtra::grid.arrange(grobs = plots_list, ncol = 3) #arranges plots in a grid




```

Figure A (left): measles cases, Figure B (middle): measles imm, Figure C (right): cumulative measles

**Interpretation**

'Measles Cases in China Per Year' shows an overall negative trend, meaning the number of measles cases per year in China has decreased overall between 1983 and 2015. However, there are fluctuations within the data, with a particular plateau between 1994 and 2000, followed by a spurge, until it begins to fall again.

To compare Figure B with Figure A, there is an overall positive trend - measles immunization rates increase throughout the years. However, like Figure A, there are fluctuations. At approximately a similar time to the plateau in Figure A, there is a fall in immunization rates, suggesting a correlation between the two.

Finally, Figure C shows the cumulative cases slow near the end of the data, when the immunization rate begins to reach consistent high rates each year.

These trends, at first glance, although not supported by deeper statistical analyses such as regression, suggest there may be a correlation between immunization rates and disease incidence. Furthermore, the fluctuations within the trends may suggest other factors at play, such as socioeconomic, cultural, etc. Such factors have been shown to have an influence on vaccine uptake hesitancy [@enyinnaya2024], which would impact disease incidence. Thus, such visualizations can be utilized by social scientists in research on public health and its relationship with other social factors.

**AI use**

Throughout the computational process, ChatGPT was used as a collaborative tool on certain occasions in various manners. Primarily, it was used to help in understanding of concepts and coding functions taught throughout the module, explaining any gaps in knowledge in a detailed but understandable manner, and making any clarifications needed. Thus, concepts taught in the module were able to be applied to the computational process with more ease. Additionally, ChatGPT was consulted when codes returned errors that were beyond understanding. The AI was able to explain a simplified meaning of the error message, as well as pointing out the problem within the code, allowing for an easier fix.

Decidedly, its use was most impactful in the creation of the entity_range function. While the correct approach was originally taken regarding structure, without ChatGPT's innovative teaching of the new function '.data\[\]', the function would ultimately have been more complex and thus prone to error, especially if indices were used. ChatGPT provided several solutions which were all considered, thus allowing for a deeper understanding of various codes, expanding the R-skillset, while ultimately providing a simpler code.

Few issues were encountered when communicating with ChatGPT, with the experience running smoothly overall. Issues primarily stemmed from a lack of detail in questions posed, resulting in sending several messages before receiving the desired response from ChatGPT. As a result, chat threads became long and unorganized, making finding desired information within them time-consuming.

In conclusion, ChatGPT aided both the computational process and learning experience, ensuring full understanding was had, helping reach the interpretation that there is a relationship between measles immunization rates, disease incidence, and cumulative cases, which can be seen via the visualisation.
